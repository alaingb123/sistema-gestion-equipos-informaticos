from django.contrib import admin
from django.utils.html import format_html
from django.contrib.admin import SimpleListFilter
from import_export.admin import ExportMixin
from import_export.formats import base_formats
from .models import Monitor, Teclado, Mouse, Impresora, Scaner, UPS
from EstacionesTrabajo.models import AreaOrganizativa
from .resources import (MonitorResource, TecladoResource, MouseResource, 
                      ImpresoraResource, ScanerResource, UPSResource)
from EstacionesTrabajo.admin import PCAreaSelectFilter, PCSubareaSelectFilter, PCLocalSelectFilter


class AreaSelectFilter(SimpleListFilter):
    title = '√Årea'
    parameter_name = 'area'
    template = 'admin/dropdown_filter.html'

    def lookups(self, request, model_admin):
        areas = AreaOrganizativa.objects.filter(area_padre__isnull=True).order_by('nombre')
        return [(str(area.id), area.nombre) for area in areas]

    def queryset(self, request, queryset):
        value = self.value()
        if value:
            try:
                area_id = int(value)
                # Incluir el √°rea seleccionada y todas sus sub√°reas y sub-sub√°reas
                area_ids = [area_id]
                # Obtener sub√°reas directas
                subareas = AreaOrganizativa.objects.filter(area_padre_id=area_id)
                area_ids.extend(subareas.values_list('id', flat=True))
                # Obtener sub-sub√°reas
                for subarea in subareas:
                    sub_subareas = AreaOrganizativa.objects.filter(area_padre_id=subarea.id)
                    area_ids.extend(sub_subareas.values_list('id', flat=True))
                return queryset.filter(area_id__in=area_ids)
            except (ValueError, TypeError):
                return queryset
        return queryset

class SubareaSelectFilter(SimpleListFilter):
    title = 'Sub√°rea/Departamento'
    parameter_name = 'subarea'
    template = 'admin/dropdown_filter.html'

    def lookups(self, request, model_admin):
        # Filtrar solo las sub√°reas que son hijas directas de √°reas principales
        subareas = AreaOrganizativa.objects.filter(
            area_padre__isnull=False,
            area_padre__area_padre__isnull=True
        ).order_by('area_padre__nombre', 'nombre')
        return [(str(subarea.id), subarea.nombre) for subarea in subareas]

    def queryset(self, request, queryset):
        value = self.value()
        if value:
            try:
                subarea_id = int(value)
                # Incluir la sub√°rea seleccionada y sus sub-sub√°reas
                area_ids = [subarea_id]
                sub_subareas = AreaOrganizativa.objects.filter(area_padre_id=subarea_id)
                area_ids.extend(sub_subareas.values_list('id', flat=True))
                return queryset.filter(area_id__in=area_ids)
            except (ValueError, TypeError):
                return queryset
        return queryset

class LocalSelectFilter(SimpleListFilter):
    title = 'Local'
    parameter_name = 'local'
    template = 'admin/dropdown_filter.html'

    def lookups(self, request, model_admin):
        # Filtrar solo las √°reas que son de tercer nivel (locales)
        locales = AreaOrganizativa.objects.filter(
            area_padre__area_padre__isnull=False
        ).order_by('area_padre__area_padre__nombre', 'area_padre__nombre', 'nombre')
        return [(str(local.id), local.nombre) for local in locales]

    def queryset(self, request, queryset):
        value = self.value()
        if value:
            try:
                local_id = int(value)
                return queryset.filter(area_id=local_id)
            except (ValueError, TypeError):
                return queryset
        return queryset

class DispositivoAdmin(admin.ModelAdmin):
    list_display = ['get_numero_inventario', 'get_responsable', 'get_area', 'get_pc', 
                   'get_estado', 'get_proyecto_internacional', 'marca']
    list_filter = [
        PCAreaSelectFilter,
    PCSubareaSelectFilter,
    PCLocalSelectFilter,
        'funciona', 
        'es_proyecto_internacional', 
    ]
    search_fields = ['numero_inventario__codigo', 'pc_asociada__numero_inventario__codigo',
                    'marca', 'responsable__nombre', 'area__nombre', 
                    'area__area_padre__nombre', 'area__area_padre__area_padre__nombre']
    autocomplete_fields = ['numero_inventario', 'pc_asociada', 'responsable', 'area']
    list_per_page = 20

    fieldsets = (
        ('Informaci√≥n del Dispositivo', {
            'fields': ('numero_inventario', 'marca')
        }),
        ('Asignaci√≥n', {
            'fields': ('pc_asociada', ('responsable', 'area')),
            'description': 'Si asigna una PC, el responsable y √°rea se tomar√°n autom√°ticamente de la PC. '
                         'Si desea asignar un responsable o √°rea diferente, primero guarde el dispositivo '
                         'y luego modifique estos campos.'
        }),
        ('Estado', {
            'fields': ('funciona', 'es_proyecto_internacional')
        }),
    )

    def get_numero_inventario(self, obj):
        if obj.numero_inventario:
            return obj.numero_inventario.codigo
        return "Sin n√∫mero"
    get_numero_inventario.short_description = 'No. Inventario'

    def get_pc(self, obj):
        if obj.pc_asociada and obj.pc_asociada.numero_inventario:
            return obj.pc_asociada.numero_inventario.codigo
        return "Sin estaci√≥n asociada"
    get_pc.short_description = 'Estaci√≥n Asociada'

    def get_responsable(self, obj):
        if obj.responsable:
            if obj.pc_asociada and obj.responsable == obj.pc_asociada.responsable:
                return format_html('<span title="Heredado de PC">üë§ {}</span>', obj.responsable.nombre)
            return obj.responsable.nombre
        return "Sin responsable"
    get_responsable.short_description = 'Responsable'

    def get_area(self, obj):
        if obj.area:
            # Construir la ruta jer√°rquica completa para el t√≠tulo
            if obj.area.area_padre:
                if obj.area.area_padre.area_padre:
                    # Tercer nivel (Local)
                    area_completa = f"{obj.area.area_padre.area_padre.nombre} - {obj.area.area_padre.nombre} - {obj.area.nombre}"
                else:
                    # Segundo nivel (Departamento)
                    area_completa = f"{obj.area.area_padre.nombre} - {obj.area.nombre}"
            else:
                # Primer nivel (√Årea principal)
                area_completa = obj.area.nombre

            # Para el display, mostrar solo el nombre del √°rea m√°s espec√≠fica
            if obj.pc_asociada and obj.area == obj.pc_asociada.area:
                return format_html('<span title="{0}">üè¢ {1}</span>', area_completa, obj.area.nombre)
            return format_html('<span title="{0}">{1}</span>', area_completa, obj.area.nombre)
        return "Sin √°rea"
    get_area.short_description = '√Årea'
    get_area.admin_order_field = 'area__area_padre__area_padre__nombre'

    def get_estado(self, obj):
        if obj.funciona:
            return format_html('<span style="color: green;">‚úî</span>')
        return format_html('<span style="color: red;">‚úò</span>')
    get_estado.short_description = 'Estado'

    def get_proyecto_internacional(self, obj):
        return "SI" if obj.es_proyecto_internacional else "NO"
    get_proyecto_internacional.short_description = 'Proyecto'

@admin.register(Monitor)
class MonitorAdmin(ExportMixin, DispositivoAdmin):
    resource_class = MonitorResource
    formats = [base_formats.XLSX]

@admin.register(Teclado)
class TecladoAdmin(ExportMixin, DispositivoAdmin):
    resource_class = TecladoResource
    formats = [base_formats.XLSX]

@admin.register(Mouse)
class MouseAdmin(ExportMixin, DispositivoAdmin):
    resource_class = MouseResource
    formats = [base_formats.XLSX]

@admin.register(Impresora)
class ImpresoraAdmin(ExportMixin, DispositivoAdmin):
    resource_class = ImpresoraResource
    formats = [base_formats.XLSX]

@admin.register(Scaner)
class ScanerAdmin(ExportMixin, DispositivoAdmin):
    resource_class = ScanerResource
    formats = [base_formats.XLSX]

@admin.register(UPS)
class UPSAdmin(ExportMixin, DispositivoAdmin):
    resource_class = UPSResource
    formats = [base_formats.XLSX]
